package inv

int $maxCard = 1023
int $maxParticle = 1023
int $maxHat = 1023
forgenerate($i,0,$maxCard){
	INT hasCard_$i
}
forgenerate($i,0,$maxParticle){
	INT hasParticule_$i
}
forgenerate($i,0,$maxHat){
	INT hasHat_$i
}

FUNCTION<(parti),(void)> SelectedParticule
INT SelectedParticuleIndex
FUNCTION<(hat),(void)> SelectedHat
INT SelectedHatIndex

const int maxPerSlot = 5

enum("card","card.csv","CSV")
const int nbCard = $card.length
const int nbpage = $eval(($card.length/21)-1)eval$

enum("particules","particules.csv","CSV")
const int nbParticules = $particules.length
const int nbpageparticules = $eval(($particules.length/21)-1)eval$

enum("hats","hats.csv","CSV")
const int nbHats = $hats.length
const int nbpagehats = $eval(($hats.length/21)-1)eval$

require $eval($hats.length%21) == 0 "Number of hats must be a multiple of 21"
require $eval($card.length%21) == 0 "Number of cards must be a multiple of 21"
require $eval($particules.length%21) == 0 "Number of particles must be a multiple of 21"
require $card.length <= $maxCard "Number of card must be lower then $maxCard"
require $hats.length <= $maxHat "Number of hat must be lower then $maxHat"
require $particules.length <= $maxParticle "Number of particules must be lower then $maxParticle"

def giveAllCard(){
	int $m = fromconst(nbCard)
	forgenerate($i,0,$m){
		hasCard_$i ++
	}
}
def giveAllParticule(){
	int $m = fromconst(nbParticules)
	forgenerate($i,0,$m){
		hasParticule_$i = true
	}
}
def giveAllHat(){
	int $m = fromconst(nbHats)
	forgenerate($i,0,$m){
		hasHat_$i = true
	}
}
def takeAllCard(){
	int $m = fromconst(nbCard)
	forgenerate($i,0,$m){
		hasCard_$i = 0
	}
}
def takeAllParticule(){
	int $m = fromconst(nbParticules)
	forgenerate($i,0,$m){
		hasParticule_$i = false
	}
}
def takeAllHat(){
	int $m = fromconst(nbHats)
	forgenerate($i,0,$m){
		hasHat_$i = false
	}
}